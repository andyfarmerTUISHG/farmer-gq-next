/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Tags = {
  _id: string;
  _type: "tags";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
};

export type Sitelinks = {
  _id: string;
  _type: "sitelinks";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  url?: string;
};

export type Profile = {
  _id: string;
  _type: "profile";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  fullName?: string;
  headline?: string;
};

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Article = {
  _id: string;
  _type: "article";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  tags?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tags";
  }>;
  author?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "person";
  }>;
  bodycopy?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        alt?: string;
        _type: "image";
        _key: string;
      }
  >;
  origurl?: string;
  createddate?: string;
  updateddate?: string;
  asset?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    attribution?: string;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  menuItems?: Array<
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "article";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sitelinks";
      }
  >;
  showcaseArticles?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "article";
  }>;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Tags
  | Sitelinks
  | Profile
  | Person
  | Article
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug
  | Settings
  | Code;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: paginatedArticlesQuery
// Query: *[_type == "article"] | order(_id) [$skip...$pageSize] {    _id,    "slug": slug.current,    name,    createdDate,    bodycopy,    "authors": author[]->{ name, "slug": slug.current},    "articleCount": count(*[_type == "article"])  }
export type PaginatedArticlesQueryResult = Array<{
  _id: string;
  slug: string | null;
  name: string | null;
  createdDate: null;
  bodycopy: Array<
    | ({
        _key: string;
      } & Code)
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        alt?: string;
        _type: "image";
        _key: string;
      }
  > | null;
  authors: Array<{
    name: string | null;
    slug: string | null;
  }> | null;
  articleCount: number;
}>;
// Variable: allArticlesQuery
// Query: *[_type == "article"] {    _id,    "slug": slug.current,    name,    createdDate,    bodycopy,    "authors": author[]->{ name, "slug": slug.current},  }
export type AllArticlesQueryResult = Array<{
  _id: string;
  slug: string | null;
  name: string | null;
  createdDate: null;
  bodycopy: Array<
    | ({
        _key: string;
      } & Code)
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        alt?: string;
        _type: "image";
        _key: string;
      }
  > | null;
  authors: Array<{
    name: string | null;
    slug: string | null;
  }> | null;
}>;
// Variable: articleBySlugQuery
// Query: *[_type == "article" && slug.current == $slug][0] {        _id,        "authorName": author[0]->name,        "slug": slug.current,        name,        createdDate,        bodycopy,        "authors": author[]->{ name, "slug": slug.current, image},    }
export type ArticleBySlugQueryResult = {
  _id: string;
  authorName: string | null;
  slug: string | null;
  name: string | null;
  createdDate: null;
  bodycopy: Array<
    | ({
        _key: string;
      } & Code)
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        alt?: string;
        _type: "image";
        _key: string;
      }
  > | null;
  authors: Array<{
    name: string | null;
    slug: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  }> | null;
} | null;
// Variable: articlesWithNoAuthorsQuery
// Query: *[_type == "article" && (!defined(author) || count(author) == 0)] {    _id,    "slug": slug.current,    name,    createdDate,    bodycopy  }
export type ArticlesWithNoAuthorsQueryResult = Array<{
  _id: string;
  slug: string | null;
  name: string | null;
  createdDate: null;
  bodycopy: Array<
    | ({
        _key: string;
      } & Code)
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        caption?: string;
        alt?: string;
        _type: "image";
        _key: string;
      }
  > | null;
}>;
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{    menuItems[]->{      _type,      "slug": slug.current,      name,      url,      title    },  }
export type SettingsQueryResult = {
  menuItems: Array<
    | {
        _type: "article";
        slug: string | null;
        name: string | null;
        url: null;
        title: null;
      }
    | {
        _type: "sitelinks";
        slug: null;
        name: null;
        url: string | null;
        title: string | null;
      }
  > | null;
} | null;
// Variable: articleShowcaseQuery
// Query: *[_type == "settings"][0]{    showcaseArticles[]->{      _type,      "slug": slug.current,      name,      url,      title    },  }
export type ArticleShowcaseQueryResult = {
  showcaseArticles: Array<{
    _type: "article";
    slug: string | null;
    name: string | null;
    url: null;
    title: null;
  }> | null;
} | null;
// Variable: profileQuery
// Query: *[_type == "profile"]{    _id,    fullName,    headline,  }
export type ProfileQueryResult = Array<{
  _id: string;
  fullName: string | null;
  headline: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"article\"] | order(_id) [$skip...$pageSize] {\n    _id,\n    \"slug\": slug.current,\n    name,\n    createdDate,\n    bodycopy,\n    \"authors\": author[]->{ name, \"slug\": slug.current},\n    \"articleCount\": count(*[_type == \"article\"])\n  }\n": PaginatedArticlesQueryResult;
    "\n  *[_type == \"article\"] {\n    _id,\n    \"slug\": slug.current,\n    name,\n    createdDate,\n    bodycopy,\n    \"authors\": author[]->{ name, \"slug\": slug.current},\n  }\n": AllArticlesQueryResult;
    "\n    *[_type == \"article\" && slug.current == $slug][0] {\n        _id,\n        \"authorName\": author[0]->name,\n        \"slug\": slug.current,\n        name,\n        createdDate,\n        bodycopy,\n        \"authors\": author[]->{ name, \"slug\": slug.current, image},\n    }\n": ArticleBySlugQueryResult;
    "\n  *[_type == \"article\" && (!defined(author) || count(author) == 0)] {\n    _id,\n    \"slug\": slug.current,\n    name,\n    createdDate,\n    bodycopy\n  }\n": ArticlesWithNoAuthorsQueryResult;
    "\n  *[_type == \"settings\"][0]{\n    menuItems[]->{\n      _type,\n      \"slug\": slug.current,\n      name,\n      url,\n      title\n    },\n  }\n": SettingsQueryResult;
    "\n  *[_type == \"settings\"][0]{\n    showcaseArticles[]->{\n      _type,\n      \"slug\": slug.current,\n      name,\n      url,\n      title\n    },\n  }\n": ArticleShowcaseQueryResult;
    "\n  *[_type == \"profile\"]{\n    _id,\n    fullName,\n    headline,\n  }\n": ProfileQueryResult;
  }
}
